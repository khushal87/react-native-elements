(window.webpackJsonp=window.webpackJsonp||[]).push([[111],{209:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var o=n(3),r=n(8),a=(n(0),n(293)),i={id:"customization",title:"Customization"},l={unversionedId:"customization",id:"version-3.4.2/customization",isDocsHomePage:!1,title:"Customization",description:"Congrats! You've installed React Native Elements and your immediate question",source:"@site/versioned_docs/version-3.4.2/customization.md",slug:"/customization",permalink:"/docs/customization",editUrl:"https://github.com/react-native-elements/react-native-elements/edit/next/website/versioned_docs/version-3.4.2/customization.md",version:"3.4.2",sidebar:"version-3.4.2/docs",previous:{title:"Overview",permalink:"/docs/overview"},next:{title:"Usage on the Web",permalink:"/docs/web_usage"}},s=[{value:"Component Styles",id:"component-styles",children:[]},{value:"Theming",id:"theming",children:[{value:"Using Composition",id:"using-composition",children:[]},{value:"Using ThemeProvider",id:"using-themeprovider",children:[]},{value:"TypeScript Definitions (extending the default theme)",id:"typescript-definitions-extending-the-default-theme",children:[]},{value:"Order of Styles",id:"order-of-styles",children:[]},{value:"The Theme Object",id:"the-theme-object",children:[]},{value:"Dark Mode",id:"dark-mode",children:[]},{value:"Using the theme in your own components",id:"using-the-theme-in-your-own-components",children:[]},{value:"Using the respective platform&#39;s native colors",id:"using-the-respective-platforms-native-colors",children:[]},{value:"Common Pitfalls",id:"common-pitfalls",children:[]}]}],c={rightToc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Congrats! You've installed React Native Elements and your immediate question\ngoes something like this:"),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"So umm, how do I change how it looks?")),Object(a.b)("p",null,"Great question! A UI Kit wouldn't be that useful if the apps everyone built\nlooked the same right? For this case React Native Elements provide a number of\nprops on each component to enable you to style them how you want."),Object(a.b)("h2",{id:"component-styles"},"Component Styles"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Every")," component from React Native Elements has a container around it. The\ncontainer is just a traditional ",Object(a.b)("inlineCode",{parentName:"p"},"<View />")," from react native that has some\nstyling on it. This default styling prevents components from colliding with each\nother. If you want to change how two components react to each on the screen your\nfirst stop should be the ",Object(a.b)("inlineCode",{parentName:"p"},"containerStyle")," prop."),Object(a.b)("p",null,"Similar to ",Object(a.b)("inlineCode",{parentName:"p"},"containerStyle"),", components may provide their custom style props\nlike ",Object(a.b)("inlineCode",{parentName:"p"},"buttonStyle"),", ",Object(a.b)("inlineCode",{parentName:"p"},"titleStyle")," etc. Always refer to the documentation for the\ncomponent to find out which style props it provides."),Object(a.b)("h2",{id:"theming"},"Theming"),Object(a.b)("p",null,"While component styles are great for single use, you may want to have the same\nstyling for every instance of a component. For example, you may want all your\nbuttons to be blue or have the same font. Here are some ways to reuse styles\nwith React Native Elements."),Object(a.b)("h3",{id:"using-composition"},"Using Composition"),Object(a.b)("p",null,"With this approach, we create one component with the styles we want and use that\ninstead of the built-in component."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { Button } from 'react-native-elements';\n\nconst RaisedButton = (props) => <Button raised {...props} />;\n\n// Your App\nconst App = () => {\n  return <RaisedButton title=\"Yea\" />;\n};\n")),Object(a.b)("p",null,"If we want to use a button that's raised in our app, we can use ",Object(a.b)("inlineCode",{parentName:"p"},"RaisedButton"),"\ninstead of using ",Object(a.b)("inlineCode",{parentName:"p"},"Button"),". This component still accepts all the props from the\nnormal ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," just that it has the ",Object(a.b)("inlineCode",{parentName:"p"},"raised")," prop set by default."),Object(a.b)("h3",{id:"using-themeprovider"},"Using ThemeProvider"),Object(a.b)("p",null,"The previous solution works great for only one component, but imagine having to\ndo this for every component you want custom styles for. That could get a bit\ntedious to manage. Thankfully, there's a better way to do this. React Native\nElements ships with a 3 utilities for large-scale theming."),Object(a.b)("p",null,"Firstly you'll want to set up your ",Object(a.b)("inlineCode",{parentName:"p"},"ThemeProvider"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),'import { ThemeProvider, Button } from \'react-native-elements\';\n\nconst theme = {\n  Button: {\n    raised: true,\n  },\n};\n\n// Your App\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title="My Button" />\n      <Button title="My 2nd Button" />\n    </ThemeProvider>\n  );\n};\n')),Object(a.b)("p",null,"The example above achieves the same goals as the first example \u2014 apply the same\nstyles to multiple instances of ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," in the app. However this example\napplies the ",Object(a.b)("inlineCode",{parentName:"p"},"raised")," prop to every instance of ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," inside the component\ntree under ",Object(a.b)("inlineCode",{parentName:"p"},"ThemeProvider"),". Both of these buttons will have the ",Object(a.b)("inlineCode",{parentName:"p"},"raised")," prop\nset to true."),Object(a.b)("p",null,"This is extremely convenient and is made possible through\n",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://reactjs.org/docs/context.html"}),"React's Context API"),"."),Object(a.b)("hr",null),Object(a.b)("h3",{id:"typescript-definitions-extending-the-default-theme"},"TypeScript Definitions (extending the default theme)"),Object(a.b)("p",null,"TypeScript definitions for your theme can be extended by using TypeScript's ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://www.typescriptlang.org/docs/handbook/declaration-merging.html"}),"declaration merging")," feature. First you need to create a declaration file called ",Object(a.b)("inlineCode",{parentName:"p"},"react-native-elements.d.ts")," and then declare the module ",Object(a.b)("inlineCode",{parentName:"p"},"react-native-elements")," and 're-export' the types that you want to extend."),Object(a.b)("p",null,"i.e. below we add a custom p1Style to the Text theme object and we add a bunch of colors to the colors object."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-typescript"}),"type RecursivePartial<T> = { [P in keyof T]?: RecursivePartial<T[P]> };\n\ndeclare module 'react-native-elements' {\n  export interface TextProps {\n    p1Style: StyleProp<TextStyle>;\n  }\n\n  export interface Colors {\n    background: string;\n    border: string;\n    text: string;\n    altText: string;\n    danger: string;\n  }\n\n  export interface FullTheme {\n    colors: RecursivePartial<Colors>;\n    Text: Partial<TextProps>;\n  }\n}\n")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"order-of-styles"},"Order of Styles"),Object(a.b)("p",null,"What happens now if we want a ",Object(a.b)("inlineCode",{parentName:"p"},"Button")," that isn't raised? To do that we have to understand the order in which styles are applied."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Internal > Theme > External")),Object(a.b)("h4",{id:"internal"},"Internal"),Object(a.b)("p",null,"Internal components styles are the styles which are defined in the component\nfile. These are applied first."),Object(a.b)("h4",{id:"theme"},"Theme"),Object(a.b)("p",null,"Theme styles are the values that are set by the ThemeProvider If present, these\nare applied second."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n")),Object(a.b)("p",null,"This will override the white color for the title set in the component's style."),Object(a.b)("h4",{id:"external"},"External"),Object(a.b)("p",null,"External styles are the styles which are set through the component props. These\nare applied last and have the highest precedence."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { ThemeProvider, Button } from 'react-native-elements';\n\nconst theme = {\n  Button: {\n    titleStyle: {\n      color: 'red',\n    },\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Button title=\"My Button\" titleStyle={{ color: 'pink' }} />\n    </ThemeProvider>\n  );\n};\n")),Object(a.b)("p",null,"This will override both the white color for the title set in the component's\nstyle as well as the red color set in the theme."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"Remember if you want to override the values set in the theme you can always\nuse component props.")),Object(a.b)("p",null,"Note: To theme subcomponents such as ",Object(a.b)("inlineCode",{parentName:"p"},"ListItem.Title"),', in your theme remove the dot and list them as "ListItemTitle"'),Object(a.b)("hr",null),Object(a.b)("h3",{id:"the-theme-object"},"The Theme Object"),Object(a.b)("p",null,"By default, the theme object looks like this. You can add whatever values you\nwant to the theme, and they will be merged with the default. By default the\nplatform colors aren't used anywhere. These native colors are added for\nyour convenience."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-tsx"}),"interface theme {\n  colors: {\n    primary;\n    secondary;\n    white;\n    black;\n    grey0;\n    grey1;\n    grey2;\n    grey3;\n    grey4;\n    grey5;\n    greyOutline;\n    searchBg;\n    success;\n    error;\n    warning;\n    divider;\n    platform: {\n      ios: {\n        primary;\n        secondary;\n        grey;\n        searchBg;\n        success;\n        error;\n        warning;\n      };\n      android: {\n        // Same as ios\n      };\n      web: {\n        // Same as ios\n      };\n    };\n  };\n}\n")),Object(a.b)("p",null,"Setting styles in the theme is as simple as using the name of the component, as\na key and the props you want to change as the value."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  Avatar: {\n    rounded: true,\n  },\n  Badge: {\n    textStyle: { fontSize: 30 },\n  },\n};\n\n...\n\n<ThemeProvider theme={theme}>\n")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"dark-mode"},"Dark Mode"),Object(a.b)("p",null,"React Native Elements also provides a preset dark mode palette to get you started with using dark mode in your app.\nUse the prop ",Object(a.b)("inlineCode",{parentName:"p"},"useDark")," in ",Object(a.b)("inlineCode",{parentName:"p"},"ThemeProvider")," to set the default dark theme. You may want to set this by using a button,\nor by using the user's configured settings"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { useColorScheme } from 'react-native-appearance';\n\n...\n  let colorScheme = useColorScheme();\n...\n  <ThemeProvider useDark={colorScheme === 'dark'}>\n...\n")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"using-the-theme-in-your-own-components"},"Using the theme in your own components"),Object(a.b)("p",null,"You may want to make use of the theming utilities in your own components. For\nthis you can use the ",Object(a.b)("inlineCode",{parentName:"p"},"withTheme")," HOC exported from this library. It adds three\nprops to the component it wraps - ",Object(a.b)("inlineCode",{parentName:"p"},"theme"),", ",Object(a.b)("inlineCode",{parentName:"p"},"updateTheme")," and ",Object(a.b)("inlineCode",{parentName:"p"},"replaceTheme"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { Text } from 'react-native';\nimport { withTheme } from 'react-native-elements';\n\nfunction MyComponent(props) {\n  const { theme, updateTheme, replaceTheme } = props;\n  return <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n}\n\nexport default withTheme(MyComponent);\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"updateTheme")," function merges the theme passed in with the current theme."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const theme = {\n  colors: {\n    primary: 'pink',\n  },\n};\n\n// We can update the primary color\nupdateTheme({ colors: { primary: 'red' } });\n")),Object(a.b)("p",null,"The ",Object(a.b)("inlineCode",{parentName:"p"},"replaceTheme")," function merges the theme passed in with the default theme."),Object(a.b)("p",null,"Don't want to wrap your components? You can use the ",Object(a.b)("inlineCode",{parentName:"p"},"ThemeConsumer")," component\nwhich uses render props!"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { Text } from 'react-native';\nimport { ThemeConsumer } from 'react-native-elements';\n\nconst MyComponent = () => (\n  <ThemeConsumer>\n    {({ theme }) => (\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>;\n    )}\n  </ThemeConsumer>\n)\n")),Object(a.b)("p",null,"You can also use ",Object(a.b)("inlineCode",{parentName:"p"},"useTheme()")," if you use hooks."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { Text } from 'react-native';\nimport { useTheme } from 'react-native-elements';\n\nconst MyComponent = () => {\n  const { theme } = useTheme();\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n")),Object(a.b)("p",null,"If you want to keep your styles outside the component use ",Object(a.b)("inlineCode",{parentName:"p"},"makeStyles()")," (hook generator) to reference the ",Object(a.b)("inlineCode",{parentName:"p"},"theme")," and component props (optional param)."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import React from 'react';\nimport { Text } from 'react-native';\nimport { makeStyles } from 'react-native-elements';\n\ntype Params = {\n  fullWidth?: boolean,\n};\n\nconst MyComponent = (props: Props) => {\n  const styles = useStyles(props);\n\n  return (\n    <View style={styles.container}>\n      <Text style={{ color: theme.colors.primary }}>Yo!</Text>\n    </View>\n  );\n};\n\nconst useStyles = makeStyles((theme, props: Props) => ({\n  container: {\n    background: theme.colors.white,\n    width: props.fullWidth ? '100%' : 'auto',\n  },\n  text: {\n    color: theme.colors.primary,\n  },\n}));\n")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"using-the-respective-platforms-native-colors"},"Using the respective platform's native colors"),Object(a.b)("p",null,"You may want to style your app using the native color palette. You can do this\nusing the ",Object(a.b)("inlineCode",{parentName:"p"},"colors")," object and the ",Object(a.b)("inlineCode",{parentName:"p"},"Platform")," API."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"import { Platform } from 'react-native';\nimport { Button, colors, ThemeProvider } from 'react-native-elements';\n\nconst theme = {\n  colors: {\n    ...Platform.select({\n      default: colors.platform.android,\n      ios: colors.platform.ios,\n    }),\n  },\n};\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      // This button's color will now be the default iOS / Android blue.\n      <Button title=\"My Button\" />\n    </ThemeProvider>\n  );\n};\n")),Object(a.b)("hr",null),Object(a.b)("h3",{id:"common-pitfalls"},"Common Pitfalls"),Object(a.b)("p",null,"This section outlines some common pitfalls when using Theming."),Object(a.b)("h4",{id:"my-local-styles-arent-working-with-the-theme"},"My local styles aren't working with the theme"),Object(a.b)("p",null,"It's important to understand that the ",Object(a.b)("inlineCode",{parentName:"p"},"ThemeProvider")," works by merging your local(external) styles with those set on the theme.\nThis means that in both cases ",Object(a.b)("strong",{parentName:"p"},"the type of these styles must be the same"),"."),Object(a.b)("h5",{id:"example-1"},"Example 1"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button\n  containerStyle={{ backgroundColor: 'blue' }}\n/>\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"\u2705 Works"),Object(a.b)("p",{parentName:"blockquote"},"In both cases the style is an ",Object(a.b)("inlineCode",{parentName:"p"},"object"))),Object(a.b)("br",null),Object(a.b)("h5",{id:"example-2"},"Example 2"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const theme = {\n  Button: {\n    containerStyle: [\n      {\n        marginTop: 10;\n      }\n    ]\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"\u2705 Works"),Object(a.b)("p",{parentName:"blockquote"},"In both cases the style is an ",Object(a.b)("inlineCode",{parentName:"p"},"array"))),Object(a.b)("br",null),Object(a.b)("h5",{id:"example-3"},"Example 3"),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-jsx"}),"const theme = {\n  Button: {\n    containerStyle: {\n      marginTop: 10;\n    }\n  }\n}\n\n<Button containerStyle={[{ backgroundColor: 'blue' }]} />\n")),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},"\ud83d\udeab Doesn't work"),Object(a.b)("p",{parentName:"blockquote"},"In one case the style is an ",Object(a.b)("inlineCode",{parentName:"p"},"object")," and another the style is an ",Object(a.b)("inlineCode",{parentName:"p"},"array"))))}p.isMDXComponent=!0},293:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return h}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(n),u=o,h=m["".concat(i,".").concat(u)]||m[u]||b[u]||a;return n?r.a.createElement(h,l(l({ref:t},c),{},{components:n})):r.a.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);